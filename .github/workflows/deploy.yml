name: Fullstack Deploy to EC2

on:
  push:
    branches:
      - main   # trigger only when you push to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # --- Checkout the repository ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Setup Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # --- Verify required secrets are available ---
      - name: Verify secrets
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "‚ùå EC2_HOST secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_USER }}" ]; then
            echo "‚ùå EC2_USER secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "‚ùå EC2_SSH_KEY secret is missing"
            exit 1
          fi
          echo "‚úÖ All required secrets are available"

      # --- Deploy full application to EC2 ---
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy application to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on any error

            echo "üöÄ Starting deployment to EC2..."

            # Create project directory if it doesn't exist
            mkdir -p /home/${{ secrets.EC2_USER }}/workshop-registration
            cd /home/${{ secrets.EC2_USER }}/workshop-registration

            # Clone or pull the latest code
            if [ ! -d ".git" ]; then
              echo "üì• Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "üì• Pulling latest changes..."
              git pull origin main
            fi

            echo "üõë Stopping old container..."
            docker stop workshop-app || true
            docker rm workshop-app || true

            echo "üóëÔ∏è  Removing old image..."
            docker rmi workshop-app:latest || true

            echo "üî® Building new Docker image..."
            docker build -t workshop-app:latest .

            # Check if .env file exists, create a template if it doesn't
            if [ ! -f ".env" ]; then
              echo "‚ö†Ô∏è  .env file not found. Creating template..."
              cat > .env << EOL
            # Database Configuration
            DB_HOST=localhost
            DB_USER=root
            DB_PASSWORD=your_db_password
            DB_NAME=workshop_registration

            # Email Configuration
            SMTP_HOST=smtp.gmail.com
            SMTP_PORT=587
            SMTP_USER=your_email@gmail.com
            SMTP_PASS=your_app_password
            FROM_EMAIL=your_email@gmail.com

            # Application Configuration
            NODE_ENV=production
            PORT=5000
            EOL
              echo "üìù Please update .env file with your actual values"
            fi

            echo "üöÄ Running new container..."
            docker run -d \
              --name workshop-app \
              -p 3000:3000 \
              -p 5000:5000 \
              --env-file .env \
              --restart unless-stopped \
              workshop-app:latest

            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Frontend should be available at http://${{ secrets.EC2_HOST }}:3000"
            echo "üîß Backend API should be available at http://${{ secrets.EC2_HOST }}:5000"

            # Show container status
            echo "üìä Container status:"
            docker ps | grep workshop-app || echo "Container not running"
          EOF
