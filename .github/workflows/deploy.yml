name: üöÄ Auto Deploy to EC2 (Backend + Frontend)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup SSH connection
      - name: üîê Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Step 3: Deploy to EC2
      - name: üöÄ Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
        run: |
          echo "üîß Starting deployment to EC2..."
          ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST << EOF
          set -e

          export GIT_REPO_URL="${GIT_REPO_URL}"
          export EC2_USER="${EC2_USER}"
          export EC2_HOST="${EC2_HOST}"

          APP_DIR="/home/${EC2_USER}/workshop-registration-github-Actions"

          echo "üì¶ Checking for project directory..."
          if [ ! -d "$APP_DIR" ]; then
            echo "üåÄ Cloning repository..."
            git clone "\$GIT_REPO_URL" "\$APP_DIR"
          fi

          echo "üìÇ Updating source code..."
          cd "\$APP_DIR"
          git fetch origin main
          git reset --hard origin/main

          echo "üßπ Cleaning old backend containers and images..."
          sudo docker stop workshop-backend >/dev/null 2>&1 || true
          sudo docker rm workshop-backend >/dev/null 2>&1 || true
          sudo docker rmi workshop-backend:latest >/dev/null 2>&1 || true

          echo "üê≥ Building new backend Docker image..."
          sudo docker build -t workshop-backend:latest .

          echo "üöÄ Running new backend container..."
          # Proper quoting ‚Äî no command substitution or broken env vars
          sudo docker run -d \
            --name workshop-backend \
            -p 5000:5000 \
            --env-file .env \
            --restart unless-stopped \
            workshop-backend:latest

          echo "üèóÔ∏è Installing frontend dependencies..."
          if [ -d node_modules ]; then
            echo "‚úÖ Using cached node_modules"
          else
            npm install --prefer-offline --no-audit --progress=false
          fi

          echo "‚öôÔ∏è Building frontend..."
          npm run build

          echo "üåê Restarting frontend (Nuxt app) on port 3000..."
          pkill -f 'node .output/server/index.mjs' >/dev/null 2>&1 || true
          sleep 2

          LOG_FILE="/home/${EC2_USER}/frontend.log"
          echo "Starting Nuxt frontend..."
          nohup bash -c "setsid npm run preview -- --port 3000 > \$LOG_FILE 2>&1 &" &

          sleep 3
          if pgrep -f 'node .output/server/index.mjs' >/dev/null; then
            echo "‚úÖ Frontend running successfully!"
          else
            echo "‚ùå Frontend failed to start. Check logs at \$LOG_FILE"
          fi

          echo "‚úÖ Deployment complete!"
          echo "Backend ‚Üí http://${EC2_HOST}:5000"
          echo "Frontend ‚Üí http://${EC2_HOST}:3000"
          exit
          EOF
