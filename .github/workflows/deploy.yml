name: üöÄ Deploy Workshop Registration System

on:
  push:
    branches:
      - main  # Trigger deployment when code is pushed to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------
      # 1Ô∏è‚É£ Checkout latest code
      # ------------------------------
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      # ------------------------------
      # 2Ô∏è‚É£ Validate required secrets
      # ------------------------------
      - name: üîê Verify Secrets
        run: |
          echo "üîç Checking required secrets..."
          missing=false
          
          check_secret() {
            if [ -z "$1" ]; then
              echo "‚ùå Missing secret: $2"
              missing=true
            fi
          }

          check_secret "${{ secrets.EC2_HOST }}" "EC2_HOST"
          check_secret "${{ secrets.EC2_USER }}" "EC2_USER"
          check_secret "${{ secrets.EC2_SSH_KEY }}" "EC2_SSH_KEY"
          check_secret "${{ secrets.DB_HOST }}" "DB_HOST"
          check_secret "${{ secrets.DB_USER }}" "DB_USER"
          check_secret "${{ secrets.DB_PASSWORD }}" "DB_PASSWORD"
          check_secret "${{ secrets.DB_NAME }}" "DB_NAME"
          check_secret "${{ secrets.SMTP_HOST }}" "SMTP_HOST"
          check_secret "${{ secrets.SMTP_PORT }}" "SMTP_PORT"
          check_secret "${{ secrets.SMTP_USER }}" "SMTP_USER"
          check_secret "${{ secrets.SMTP_PASS }}" "SMTP_PASS"
          check_secret "${{ secrets.FROM_EMAIL }}" "FROM_EMAIL"
          check_secret "${{ secrets.FROM_NAME }}" "FROM_NAME"

          if [ "$missing" = true ]; then
            exit 1
          fi
          
          echo "‚úÖ All secrets are available."

      # ------------------------------
      # 3Ô∏è‚É£ Configure SSH access
      # ------------------------------
      - name: ‚öôÔ∏è Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ------------------------------
      # 4Ô∏è‚É£ Deploy to EC2
      # ------------------------------
      - name: üöÄ Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "üìÅ Navigating to app directory..."
            APP_DIR="/home/${{ secrets.EC2_USER }}/workshop-registration-github-Actions"
            cd "$APP_DIR" || exit 1

            echo "üì¶ Pulling latest code..."
            git fetch origin main
            git reset --hard origin/main

            echo "üß© Updating environment variables..."
            cat > .env <<EOL
            NODE_ENV=production
            PORT=5000

            # Database
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}

            # Email
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            FROM_EMAIL=${{ secrets.FROM_EMAIL }}
            FROM_NAME=${{ secrets.FROM_NAME }}
            EOL

            echo "üèóÔ∏è Building frontend..."
            npm ci
            npm run build

            if [ -d ".output/public" ]; then
              FRONTEND_DIR=".output/public"
            elif [ -d "dist" ]; then
              FRONTEND_DIR="dist"
            else
              echo "‚ùå No build folder found (.output/public or dist missing)"
              exit 1
            fi
            echo "‚úÖ Frontend built successfully ‚Üí $FRONTEND_DIR"

            echo "üê≥ Building Docker image for backend..."
            docker stop workshop-backend || true
            docker rm workshop-backend || true
            docker rmi workshop-backend:latest || true
            docker build -t workshop-backend:latest .

            echo "üöÄ Running backend container..."
            docker run -d \
              --name workshop-backend \
              -p 5000:5000 \
              --env-file .env \
              --restart unless-stopped \
              workshop-backend:latest

            echo "üåê Installing NGINX..."
            sudo apt-get update -qq && sudo apt-get install -y nginx

            echo "üß± Configuring NGINX..."
            sudo tee /etc/nginx/sites-available/workshop.conf > /dev/null <<NGINX_CONF
            server {
              listen 80;
              server_name _;

              location / {
                root /home/${{ secrets.EC2_USER }}/workshop-registration-github-Actions/$FRONTEND_DIR;
                index index.html;
                try_files \$uri \$uri/ /index.html;
              }

              location /api/ {
                proxy_pass http://localhost:5000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
              }

              location /health {
                proxy_pass http://localhost:5000/health;
              }
            }
            NGINX_CONF

            sudo ln -sf /etc/nginx/sites-available/workshop.conf /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl restart nginx

            echo "‚úÖ Deployment completed successfully!"
            echo "üåç Frontend:  http://${{ secrets.EC2_HOST }}"
            echo "üîß Backend:   http://${{ secrets.EC2_HOST }}/api"
            echo "üè• Health:    http://${{ secrets.EC2_HOST }}/health"

            echo "üìä Active Docker containers:"
            docker ps
          EOF
